// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protobuf/api/salary/v2/service.proto

package salary_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	salary "my_grpc/pkg/protobuf/api/salary"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalaryService_GetSalaryStream_FullMethodName = "/api.salary.v2.SalaryService/GetSalaryStream"
	SalaryService_GetListSalary_FullMethodName   = "/api.salary.v2.SalaryService/GetListSalary"
)

// SalaryServiceClient is the client API for SalaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalaryServiceClient interface {
	GetSalaryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[salary.GetSalaryRequest, Salary], error)
	GetListSalary(ctx context.Context, in *ListSalary, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Salary], error)
}

type salaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalaryServiceClient(cc grpc.ClientConnInterface) SalaryServiceClient {
	return &salaryServiceClient{cc}
}

func (c *salaryServiceClient) GetSalaryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[salary.GetSalaryRequest, Salary], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SalaryService_ServiceDesc.Streams[0], SalaryService_GetSalaryStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[salary.GetSalaryRequest, Salary]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SalaryService_GetSalaryStreamClient = grpc.BidiStreamingClient[salary.GetSalaryRequest, Salary]

func (c *salaryServiceClient) GetListSalary(ctx context.Context, in *ListSalary, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Salary], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SalaryService_ServiceDesc.Streams[1], SalaryService_GetListSalary_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListSalary, Salary]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SalaryService_GetListSalaryClient = grpc.ServerStreamingClient[Salary]

// SalaryServiceServer is the server API for SalaryService service.
// All implementations must embed UnimplementedSalaryServiceServer
// for forward compatibility.
type SalaryServiceServer interface {
	GetSalaryStream(grpc.BidiStreamingServer[salary.GetSalaryRequest, Salary]) error
	GetListSalary(*ListSalary, grpc.ServerStreamingServer[Salary]) error
	mustEmbedUnimplementedSalaryServiceServer()
}

// UnimplementedSalaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSalaryServiceServer struct{}

func (UnimplementedSalaryServiceServer) GetSalaryStream(grpc.BidiStreamingServer[salary.GetSalaryRequest, Salary]) error {
	return status.Errorf(codes.Unimplemented, "method GetSalaryStream not implemented")
}
func (UnimplementedSalaryServiceServer) GetListSalary(*ListSalary, grpc.ServerStreamingServer[Salary]) error {
	return status.Errorf(codes.Unimplemented, "method GetListSalary not implemented")
}
func (UnimplementedSalaryServiceServer) mustEmbedUnimplementedSalaryServiceServer() {}
func (UnimplementedSalaryServiceServer) testEmbeddedByValue()                       {}

// UnsafeSalaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalaryServiceServer will
// result in compilation errors.
type UnsafeSalaryServiceServer interface {
	mustEmbedUnimplementedSalaryServiceServer()
}

func RegisterSalaryServiceServer(s grpc.ServiceRegistrar, srv SalaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedSalaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SalaryService_ServiceDesc, srv)
}

func _SalaryService_GetSalaryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SalaryServiceServer).GetSalaryStream(&grpc.GenericServerStream[salary.GetSalaryRequest, Salary]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SalaryService_GetSalaryStreamServer = grpc.BidiStreamingServer[salary.GetSalaryRequest, Salary]

func _SalaryService_GetListSalary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSalary)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SalaryServiceServer).GetListSalary(m, &grpc.GenericServerStream[ListSalary, Salary]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SalaryService_GetListSalaryServer = grpc.ServerStreamingServer[Salary]

// SalaryService_ServiceDesc is the grpc.ServiceDesc for SalaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.salary.v2.SalaryService",
	HandlerType: (*SalaryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSalaryStream",
			Handler:       _SalaryService_GetSalaryStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetListSalary",
			Handler:       _SalaryService_GetListSalary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/api/salary/v2/service.proto",
}
