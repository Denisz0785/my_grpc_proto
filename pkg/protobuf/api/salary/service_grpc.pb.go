// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protobuf/api/salary/service.proto

package salary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SalaryService_GetSalary_FullMethodName = "/api.salary.SalaryService/GetSalary"
)

// SalaryServiceClient is the client API for SalaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalaryServiceClient interface {
	GetSalary(ctx context.Context, in *GetSalaryRequest, opts ...grpc.CallOption) (*GetSalaryResponse, error)
}

type salaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalaryServiceClient(cc grpc.ClientConnInterface) SalaryServiceClient {
	return &salaryServiceClient{cc}
}

func (c *salaryServiceClient) GetSalary(ctx context.Context, in *GetSalaryRequest, opts ...grpc.CallOption) (*GetSalaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSalaryResponse)
	err := c.cc.Invoke(ctx, SalaryService_GetSalary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalaryServiceServer is the server API for SalaryService service.
// All implementations must embed UnimplementedSalaryServiceServer
// for forward compatibility.
type SalaryServiceServer interface {
	GetSalary(context.Context, *GetSalaryRequest) (*GetSalaryResponse, error)
	mustEmbedUnimplementedSalaryServiceServer()
}

// UnimplementedSalaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSalaryServiceServer struct{}

func (UnimplementedSalaryServiceServer) GetSalary(context.Context, *GetSalaryRequest) (*GetSalaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalary not implemented")
}
func (UnimplementedSalaryServiceServer) mustEmbedUnimplementedSalaryServiceServer() {}
func (UnimplementedSalaryServiceServer) testEmbeddedByValue()                       {}

// UnsafeSalaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalaryServiceServer will
// result in compilation errors.
type UnsafeSalaryServiceServer interface {
	mustEmbedUnimplementedSalaryServiceServer()
}

func RegisterSalaryServiceServer(s grpc.ServiceRegistrar, srv SalaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedSalaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SalaryService_ServiceDesc, srv)
}

func _SalaryService_GetSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalaryServiceServer).GetSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SalaryService_GetSalary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalaryServiceServer).GetSalary(ctx, req.(*GetSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SalaryService_ServiceDesc is the grpc.ServiceDesc for SalaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.salary.SalaryService",
	HandlerType: (*SalaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSalary",
			Handler:    _SalaryService_GetSalary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/api/salary/service.proto",
}
